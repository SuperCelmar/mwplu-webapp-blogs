---
description: 
globs: 
alwaysApply: true
---
# MWPLU Project Context

## Overview
MWPLU is a web platform for accessing synthesized French urban planning documents (PLU). Users authenticate to access city zoning documents, comment, rate, and download them.

## Architecture
- **Frontend**: Vue 3 SPA with Vite, Vue Router, Pinia
- **Backend**: Supabase (Database, Auth, Edge Functions, Storage)
- **Hosting**: Firebase Hosting
- **Security**: Cloudflare Turnstile CAPTCHA

## Design Philosophy
**Minimalist and functional** - Clean interface focusing on essential elements only. Every component serves a clear purpose.

### Colors
- **Primary**: Black text on white backgrounds
- **Accent**: Primary black for interactive elements
- **Status**: Green for success, Red for errors, Grey for information

### Typography
- Font: Lato (Google Fonts)
- Clean, readable, consistent sizing

### Visual Elements
- Buttons: 2px border radius
- Forms/Cards: 4px border radius with subtle shadows
- Consistent spacing based on 4px grid
- Minimalist elements

## CSS Architecture
**Global styles** (imported in main.js):
- CSS variables/design tokens (variables.css)
- CSS reset for browser consistency (reset.css)
- Base typography (base.css)
- Focus states for accessibility (focus.css)
- Button styles (buttons.css)
- Form styles (forms.css)
- Message styles (messages.css)
- Utility classes (utilities.css)
- Page-specific styles (pages/)

**Component styles** (scoped in .vue files):
- All component-specific styling
- Import global variables as needed
- Use scoped styles to prevent conflicts

**Organized by purpose**: Separate files for different style concerns, with page-specific styles in dedicated folders.

## User Flow & Navigation Structure
1. **Landing** (`/`) → HomeView with hero section and basic selectors (or **PLU Repository** (`/plu-repository/`) → PluSearchView with dedicated search interface)
2. **PLU Document** (`/plu-repository/:city/:zoning/:zone`) → PluSynthesisView with specific document
3. **Authentication** → Login/Signup with CAPTCHA protection (LoginView, SignupView, ConfirmationView, ResetPasswordView)
4. **Information Pages** → About, Contact, Donation pages with integrated features
5. **Legal Pages** → Privacy, Terms, Cookies, Legal Notice, Sales Policy
6. **Documentation** → FAQ, Documentation views
7. Protected routes require authentication (Profile, Dashboard)

### URL Structure
- Clean, SEO-friendly URLs with slugs (e.g., `/plu-repository/lille/zones-urbaines/ua`)
- Breadcrumb navigation with smart preselection
- Hierarchical structure: Repository → City → Zoning → Zone

## Component Structure
Components are organized by feature:
- `common/` - Reusable base components (BaseSpinner, BaseNotification, ComingSoonView, CookieBanner, GlobalNotification, PolicyModal, TurnstileWidget)
- `auth/` - Authentication related components (moved to views/auth/)
- `layout/` - Header, footer, navigation, breadcrumbs (AppHeader, AppFooter, AppLayout, BreadcrumbNav)
- `plu/` - PLU document features (CitySelector, ZoningSelector, ZoneSelector, PluSelectionForm, synthesis components)

### Key Components
- **AppLayout**: Main layout wrapper with notification system
- **BreadcrumbNav**: Hierarchical navigation with clickable links
- **PluSearchView**: Dedicated search interface at `/plu-repository/`
- **PluSynthesisView**: Document viewer with tabs (synthesis, comments, sources, downloads)
- **BaseNotification**: Toast notification system connected to UI store
- **CookieBanner**: GDPR compliant cookie consent management
- **PolicyModal**: Dynamic modal for displaying legal policies
- **TurnstileWidget**: Cloudflare Turnstile CAPTCHA integration

### Views Structure
- **auth/**: Authentication views (LoginView, SignupView, ConfirmationView, ResetPasswordView)
- **info/**: Information pages (AboutView, ContactView, DonationView, etc.)
- **docs/**: Documentation (DocumentationView, FAQView)
- **policies/**: Legal pages (PrivacyView, TermsView, CookiesView, etc.)
- **Root level**: Main app views (HomeView, ProfileView, PluSynthesisView, etc.)

## State Management (Pinia)
- **auth.js**: User authentication state and methods
- **plu.js**: PLU selection state with slug-based navigation support
- **ui.js**: Global UI state (notifications, loading, modals)
- **counter.js**: Counter state (legacy/example store)

### PLU Store Features
- City/Zoning/Zone selection with dependency management
- Slug generation for clean URLs (`createSlug`, `findBySlug`)
- Breadcrumb data generation
- Analytics event tracking

## Services & API Integration
- **supabase.js**: Database operations and authentication
- **errorHandler.js**: Global error handling with notifications
- **turnstile.js**: CAPTCHA integration
- **donationService.js**: Payment processing support (Stripe integration)
- **firebase.js**: Firebase hosting and configuration
- **policyService.js**: Legal policy content management

## Code Patterns
- **Composables** for reusable logic (useAuth, useAnalytics, useTurnstile, useDonation, usePolicyContent, useAuthGuard)
- **Services** for API calls to Supabase and external APIs
- **Stores** (Pinia) for global state
- **Props/Events** for component communication
- **Slug-based routing** for SEO-friendly URLs
- **Content files** for static content (policies, terms)
- **Utils** for helper functions and constants
- **Assets organization** with structured folders (fonts, icons, images)

## Key Principles
- Displayed text in French
- Mobile responsive design
- User-friendly error messages
- Secure by default (RLS policies, input validation)
- Performance optimized (lazy loading, caching)
- Accessibility support (ARIA attributes, semantic HTML)

## Development Guidelines
- Use Vue 3 Composition API with `<script setup>`
- Follow Vue style guide conventions
- Keep components small and focused (< 500-800 lines)
- Handle loading and error states consistently
- Write descriptive commit messages
- Use TypeScript-style JSDoc for documentation

## Current Features Status
✅ **Authentication System**: Complete with Turnstile CAPTCHA, Supabase Auth, email confirmation
✅ **Navigation Structure**: Clean URLs with breadcrumb support
✅ **Search Interface**: Dedicated PLU repository page
✅ **Document Viewer**: Tabbed interface for synthesis, comments, ratings, downloads
✅ **Rating System**: Independent from commenting
✅ **Notification System**: Global toast notifications with validation
✅ **Responsive Design**: Mobile-friendly interface
✅ **Legal Compliance**: GDPR cookie banner, privacy policy, terms of service
✅ **Donation System**: Stripe integration with success/cancel flows
✅ **Analytics Integration**: Google Analytics 4 with custom event tracking
✅ **Contact System**: Contact form with validation
✅ **Profile Management**: User profile with settings and history
✅ **Error Handling**: Custom 404 page and error boundaries

## Future Development Areas
- Blog infrastructure and content management
- City voting/poll system for next PLU requests
- Advanced search and filtering capabilities
- User occupation selection and enhanced profiling
- Phone number verification system
- Login attempt limitations for security
- Typology integration for PLU documents
- Performance optimizations (code splitting, lazy loading)
- Enhanced analytics dashboard
- Mobile app development
- Advanced notification system